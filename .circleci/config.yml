version: 2
jobs:
  build:
    docker:
      - image: circleci/node:12.2.0-browsers
    steps:
      - checkout
      - setup_remote_docker      
      - run:
          name: Prep
          command: |
            # I should maybe be using a different docker image in Circle rather than
            # doing all of this junk, but works for me.  :)
            mkdir -p /tmp/artifacts
            sudo npm install -g yarn python3
            # Do not install s3cmd from apt-get, it's an out of date version.
            wget https://github.com/s3tools/s3cmd/releases/download/v2.0.2/s3cmd-2.0.2.tar.gz
            tar zxvf s3cmd-2.0.2.tar.gz

            curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            sudo python3 get-pip.py
            sudo pip install setuptools

            pip --version            
            
            cd s3cmd-2.0.2 && sudo python setup.py install
            cd $HOME && s3cmd --version

            pip install --upgrade --user awscli
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: |
            npm config set registry https://neo.jfrog.io/neo/api/npm/npm/
            yarn install
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run: 
          name: Lint
          command: yarn run lint
      - run:
          name: Generate build metadata
          command: |
            echo "{\"build\":\""$CIRCLE_BUILD_NUM"\",\"branch\":\""$CIRCLE_BRANCH"\",\"date\":"$(date +%s)000"}" > src/build.json
      - run:
          name: Run tests
          no_output_timeout: 1200
          command: |
            ls -l src/components/
            # Take careful note of runInBand https://jestjs.io/docs/en/troubleshooting.html#tests-are-extremely-slow-on-docker-and-or-continuous-integration-ci-server
            yarn test --runInBand --coverage --watchAll=false
      - run: 
          # This creates a runnable copy on S3 **per build**
          name: Deploy to S3 (BUILD)
          command: |
            if [ "${CIRCLE_BRANCH}" = "master" ]; then
              echo "Skipping branch build; master will be deployed"
            else
              export SUBDIR="${CIRCLE_BRANCH}-${CIRCLE_SHA1}"
              export BUCKET=halin
              export HOMEPAGE=http://halin.graphapp.io/
              export BASE_URL=http://halin.s3-website-us-east-1.amazonaws.com/
              export FINAL_URL="$BASE_URL$SUBDIR/"
              cp package.json package.orig
              # Have to monkeypatch the "homepage" field so that the react build will
              # work.
              cat package.json | sed s,$HOMEPAGE,$FINAL_URL, > package.branch
              cp package.branch package.json
              cp package.branch /tmp/artifacts/package.branch.json
              npm run build
              s3cmd put --recursive -P dist/* "s3://$BUCKET/$SUBDIR/"
              # Thinking this is a bug in s3 that has to be overcome: https://stackoverflow.com/questions/53708938/s3cmd-flagging-css-with-wrong-mime-type
              s3cmd modify "s3://$BUCKET/$SUBDIR/static/css/*.css" --mime-type="text/css"
              # Replace package file with the original
              cp package.orig package.json
              echo "$FINAL_URL"index.html | tee /tmp/artifacts/s3-deploy-build.txt
            fi
      - run:
          # This creates a runnable copy on S3 **per branch** (gets overwritten)
          name: Deploy to S3 (BRANCH)
          command: |
            export SUBDIR="${CIRCLE_BRANCH}"
            export BUCKET=halin.graphapp.io
            export HOMEPAGE=http://halin.graphapp.io/
            export BASE_URL=http://halin.graphapp.io/
            export FINAL_URL="$BASE_URL$SUBDIR/"
            cp package.json package.orig
            # Have to monkeypatch the "homepage" field so that the react build will
            # work.
            cat package.json | sed s,$HOMEPAGE,$FINAL_URL, > package.branch
            cp package.branch package.json
            cp package.branch /tmp/artifacts/package.branch.json
            npm run build
            s3cmd put --recursive -P dist/* "s3://$BUCKET/$SUBDIR/"
            # Thinking this is a bug in s3 that has to be overcome: https://stackoverflow.com/questions/53708938/s3cmd-flagging-css-with-wrong-mime-type
            s3cmd modify "s3://$BUCKET/$SUBDIR/static/css/*.css" --mime-type="text/css"
            # Replace package file with the original
            cp package.orig package.json
            echo "$FINAL_URL"index.html | tee /tmp/artifacts/s3-deploy-branch.txt
      - run: 
          name: Build Halin Docker Image
          command: docker build -t mdavidallen/halin:latest -f Dockerfile .
      - run:
          name: Test Against Neo4j 3.5.5 Enterprise
          command: |
            docker run -d --name neo4j355 --rm -p 127.0.0.1:7474:7474 -p 127.0.0.1:7687:7687 --env NEO4J_AUTH=neo4j/admin --env=NEO4J_ACCEPT_LICENSE_AGREEMENT=yes -t neo4j:3.5.5-enterprise
            sleep 20
            docker ps

            export NEO4J_URI=bolt://localhost:7687
            export NEO4J_USER=neo4j
            export NEO4J_PASSWORD=admin

            # Run gather against the temp docker image started.
            docker run --network container:neo4j355 \
              --env NEO4J_URI=bolt://localhost:7687 \
              --env NEO4J_USERNAME=neo4j \
              --env NEO4J_PASSWORD=admin \
              mdavidallen/halin:latest npm run gather > /tmp/artifacts/halin-3.5.5.txt
            docker logs neo4j355 > /tmp/artifacts/neo4j350.log
            docker stop neo4j355
      - run:
          name: Test Against Neo4j 4.1.0 Enterprise
          command: |
            docker run -d --name neo4j410 --rm -p 127.0.0.1:7474:7474 -p 127.0.0.1:7687:7687 --env NEO4J_AUTH=neo4j/admin --env=NEO4J_ACCEPT_LICENSE_AGREEMENT=yes -t neo4j:4.0.0-enterprise
            sleep 20
            docker ps

            export NEO4J_URI=bolt://localhost:7687
            export NEO4J_USER=neo4j
            export NEO4J_PASSWORD=admin

            # Run gather against the temp docker image started.
            docker run --network container:neo4j410 \
              --env NEO4J_URI=bolt://localhost:7687 \
              --env NEO4J_USERNAME=neo4j \
              --env NEO4J_PASSWORD=admin \
              mdavidallen/halin:latest npm run gather > /tmp/artifacts/halin-4.1.0.txt
            docker logs neo4j410 > /tmp/artifacts/neo4j410.log
            docker stop neo4j410
      - run:
          name: Test Against Neo4j 3.5.0 Community
          command: |
            docker run -d --name neo4j350community --rm -p 127.0.0.1:7474:7474 -p 127.0.0.1:7687:7687 --env NEO4J_AUTH=neo4j/admin --env=NEO4J_ACCEPT_LICENSE_AGREEMENT=yes -t neo4j:3.5.0
            sleep 20
            docker ps

            export NEO4J_URI=bolt://localhost:7687
            export NEO4J_USER=neo4j
            export NEO4J_PASSWORD=admin

            # Run gather against the temp docker image started.
            docker run --network container:neo4j350community \
              --env NEO4J_URI=bolt://localhost:7687 \
              --env NEO4J_USERNAME=neo4j \
              --env NEO4J_PASSWORD=admin \
              mdavidallen/halin:latest npm run gather > /tmp/artifacts/halin-3.5.0-community.txt
            docker logs neo4j350community > /tmp/artifacts/neo4j350community.log
            docker stop neo4j350community
      - run:
          name: Deploy to S3 (Production)
          command: |
            if [ "${CIRCLE_BRANCH}" = "master" ]; then
              export BUCKET=halin.graphapp.io
              cp package.json /tmp/artifacts/package.dist.json
              npm run build
              s3cmd put --recursive -P dist/* s3://$BUCKET
              # Thinking this is a bug in s3 that has to be overcome: https://stackoverflow.com/questions/53708938/s3cmd-flagging-css-with-wrong-mime-type
              s3cmd modify "s3://$BUCKET/static/css/*.css" --mime-type="text/css"
              echo https://halin.graphapp.io/ > /tmp/artifacts/s3-deploy-production.txt
            else
              echo "Not master, nothing to do"
            fi
      - run:
          name: Deploy to Docker
          command: |
            export HALIN_VERSION=$(jq -r '.version' < package.json)
            export BUILD=build-$CIRCLE_SHA1
            echo "Build $BUILD"
            echo "Halin version is $HALIN_VERSION"
            docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            if [ "${CIRCLE_BRANCH}" = "master" ]; then
              echo "Pushing docker image"              
              docker push mdavidallen/halin:latest
              docker tag mdavidallen/halin:latest mdavidallen/halin:$HALIN_VERSION
              docker push mdavidallen/halin:$HALIN_VERSION
            else
              echo "Not deploying; not master branch."
            fi
      - run:
          name: AWS Cache Invalidation
          command: |
             ~/.local/bin/aws cloudfront create-invalidation --distribution-id E1WH29O1XG2QXT --paths '/*'
      - store_artifacts:
            path: coverage
            prefix: coverage      
      - store_artifacts:
            path: /tmp/artifacts
      - store_artifacts:
            path: /home/circleci/.npm
      - store_artifacts:
            path: dist/
      - store_artifacts:
            path: src/build.json
